name: .NET + Docker CI + Image Pull

env:
  registryName: th4kidevopsreg.azurecr.io
  repositoryName: wth/dotnetcoreapp
  dockerfilePath: ./Application/src/RazorPagesTestSample
  tag: ${{github.run_number}}

on:
  push:
    branches: [ main ]
    paths:
    - 'Application/**'
    - '.github/workflows/ci.yml'
  workflow_dispatch:
      
jobs:

  build-and-test:
  
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
    - name: Install dependencies
      run: dotnet restore ./Application/src/RazorPagesTestSample/RazorPagesTestSample.csproj
    - name: Build
      run: dotnet build ./Application/src/RazorPagesTestSample/RazorPagesTestSample.csproj --configuration Release --no-restore
    - name: Test
      run: dotnet test ./Application/tests/RazorPagesTestSample.Tests/RazorPagesTestSample.Tests.csproj --no-restore --verbosity normal
    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });
  
  docker-build-and-push:
  
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Azure Container Registry Login
        uses: Azure/docker-login@v1
        with:
          # Container registry username
          username: ${{ secrets.ACR_USERNAME }}
          # Container registry password
          password: ${{ secrets.ACR_PASSWORD }}
          # Container registry server url
          login-server: ${{ env.registryName }}

      - name: Docker build
        run: docker build -t $registryName/$repositoryName:$tag --build-arg build_version=$tag $dockerfilePath

      - name: Docker Push
        run: docker push $registryName/$repositoryName:$tag
    
  deploy-to-dev:
  
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    environment:
      name: dev
      url: https://th4kidevops-dev.azurewebsites.net
    
    steps:
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: azure/webapps-deploy@v2
        with:
          app-name: 'th4kidevops-dev'
          images: ${{env.registryName}}/wth/dotnetcoreapp:${{env.tag}}

  deploy-to-test:
  
    runs-on: ubuntu-latest
    needs: deploy-to-dev
    environment:
      name: test
      url: https://th4kidevops-test.azurewebsites.net
    
    steps:
    - uses: actions/checkout@v2
    
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - uses: azure/webapps-deploy@v2
      with:
        app-name: 'th4kidevops-test'
        images: ${{env.registryName}}/wth/dotnetcoreapp:${{env.tag}}

  deploy-to-prod:
  
    runs-on: ubuntu-latest
    needs: deploy-to-test
    environment:
      name: prod
      url: https://th4kidevops-prod.azurewebsites.net
    
    steps:
    - uses: actions/checkout@v2
    
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - uses: azure/webapps-deploy@v2
      with:
        app-name: 'th4kidevops-prod'
        images: ${{env.registryName}}/wth/dotnetcoreapp:${{env.tag}}