# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

# add the evironment variables for container registry: registryName, repositoryName, dockerFolderPath, Application/src/RazorPagesTestSample, and finally a tag that is the github.run_number
env:
  registryName: 'th4kidevopsreg.azurecr.io'
  repositoryName: 'wth/dotnetcoreapp'
  dockerFolderPath: 'Application/src/RazorPagesTestSample'
  tag: ${{ github.run_number }}

on:
  push:
    branches: [ "main" ]
    #only include Application/ path
    paths:
      - 'Application/**'
  pull_request:
    branches: [ "main" ]

  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest
    # add working directory to /Application
    defaults:
      run:
        working-directory: Application/
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 3.1
    - name: Restore dependencies
      run: dotnet restore src/RazorPagesTestSample
    - name: Build
      run: dotnet build --no-restore src/RazorPagesTestSample
    - name: Test
      run: dotnet test --no-build --verbosity normal tests/RazorPagesTestSample.Tests

  dockerBuildPush:
    
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Docker Login
      # You may pin to the exact commit or the version.
      # uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
      uses: docker/login-action@v1.9.0
      with:
        # Server address of Docker registry. If not set then will default to Docker Hub
        registry: ${{ env.registryName }}
        # Username used to log against the Docker registry
        username: ${{ secrets.ACR_USERNAME }}
        # Password or personal access token used to log against the Docker registry
        password: ${{ secrets.ACR_PASSWORD }}
        # Log out from the Docker registry at the end of a job
        logout: true
        
    - name: Docker Build
      run: docker build -t $registryName/$repositoryName:$tag --build-arg build_version=$tag $dockerFolderPath
      
    - name: Docker Push
      run: docker push $registryName/$repositoryName:$tag

  deploy-to-dev:
  
    runs-on: ubuntu-latest
    needs: dockerBuildPush
    environment:
      name: dev
      url: https://th4kidevops-dev.azurewebsites.net/
    
    steps:
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: azure/webapps-deploy@v2
        with:
          app-name: 'th4kidevops-dev'
          images: ${{secrets.ACR_NAME}}/wth/dotnetcoreapp:${{github.run_number}}

  deploy-to-test:
  
    runs-on: ubuntu-latest
    needs: deploy-to-dev
    environment:
      name: th4kidevops
      url: https://th4kidevops-test.azurewebsites.net/
    
    steps:
    - uses: actions/checkout@v2
    
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.WEBAPP_TEST_CREDS }}

    - uses: azure/webapps-deploy@v2
      with:
        app-name: 'th4kidevops-test'
        images: ${{secrets.ACR_NAME}}/wth/dotnetcoreapp:${{github.run_number}}

  deploy-to-prod:
  
    runs-on: ubuntu-latest
    needs: deploy-to-test
    environment:
      name: prod
      url: https://th4kidevops-prod.azurewebsites.net/
    
    steps:
    - uses: actions/checkout@v2
    
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.PROD_WEBAPP }}

    - uses: azure/webapps-deploy@v2
      with:
        app-name: 'th4kidevops-prod'
        images: ${{secrets.ACR_NAME}}/wth/dotnetcoreapp:${{github.run_number}}